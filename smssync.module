<?php

/**
 * SMSSync File Doc Drupal module for Ushahidi's SMSSync.
 *
 * PHP Version 5.4
 *
 * @package Ushahidi
 *
 * @license http://www.gnu.org/copyleft/gpl.html GNU General Public License
 *
 * @link http://www.smssync.ushahidi.com/
 */

/**
 * Implements hook_permission().
 */
function smssync_permission() {
  return array(
    'access smssync' => array(
      'title' => t('Access SMSSync'),
      'description' => t('Access the configuration parameters in order to configure SMSSync on Android'),
    ),
    'administer smssync' => array(
      'title' => t('Administer SMSSync'),
      'description' => t('Administer sitewide options for SMSSync'),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function smssync_requirements($phase) {
  $requirements = array();

  if($phase == 'runtime') {
    if (variable_get('clean_url', 0) == 0) {
      $smssync_cleanurl_message = t('Clean URLs are required in order to correctly run SMSSync. ');
      $smssync_cleanurl_message .= 'Please ' . l(t("enable clean URLs"), "admin/config/search/clean-urls");
      $smssync_cleanurl_message .= t(' or contact your site administrator');

      $requirements['clean_url'] = array(
        'title' => t('Clean URLs'),
        'description' => $smssync_cleanurl_message,
        'value' => t("Disabled"),
        'severity' => REQUIREMENT_ERROR,
      );
    }

    if (variable_get('smssync_autorefresh_interval', "0") > 0) {
      // drupal_set_message(t"This page will reload in "
      // . variable_get('smssync_autorefresh_interval', "0") . " seconds...");
    }
  }
  
  return $requirements;
}

/**
 * Create the menus.
 */
function smssync_menu() {
  $items = array();

  $items['smssync'] = array(
    'title' => 'SMSSync Configuration',
    'page callback' => 'smssync_show_configuration',
    'access arguments' => array('access smssync'),
    'access callback' => 'user_access',
  );

  $items['smssync/listen'] = array(
    'title' => 'SMSSync by Ushahidi',
    'page callback' => 'smssync_listen',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/smssync'] = array(
    'title' => 'Configure SMSSync by Ushahidi',
    'page callback' => 'smssync_configure_smssync',
    'access arguments' => array('administer smssync'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Show the configuration options set in the system.
 */
function smssync_show_configuration() {
  global $user;

  $frontpage = $GLOBALS['base_root'] . base_path();
  
  $smssync_secret_key = check_plain(variable_get('smssync_secret_key', "123456"));

  $description = t("Use the following configuration options on the SMSsync app on Android:");
  $description .= "<ul>";
  $description .= "<li>" . t("Title: SMSsync (actually you can call this whatever you want to)") . "</li>";
  $description .= "<li>" . t("Secret key") . ": " . $smssync_secret_key . "</li>";
  $description .= "<li>" . t("Sync URL") . ": " . $frontpage . 'smssync/listen' . "</li>";
  $description .= "<li>" . t("Unique ID") . ": " . $user->uid . "</li>";
  $description .= "</ul>";

  $description .= "<p>Alternatively scan this code and SMSSync will "
          . "automatically configure itself for you"
          . "<img src='https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl="
          . "http://smssync.ushahidi.com/%2F&choe=UTF-8' "
          . "title='Link to http://smssync.ushahidi.com/' /></p>";

  $description .= t("The title of your SMS messages will be in this format") . ":<br />";
  $description .= variable_get('smssync_title_format', "SMS Message from @from");

  $clean_urls_message = 'Clean URLs are required in order to run SMSSync.'
    . ' Please ' . l(t("enable clean URLs"), "admin/config/search/clean-urls")
    . ' or contact your site administrator';

  if (variable_get('clean_url', 0) == 0) {
    return ($clean_urls_message);
  }
  else {
    return $description;
  }
}

/**
 * Call the configuration form.
 */
function smssync_configure_smssync() {
  return drupal_get_form("smssync_settings_form");
}

/**
 * The form for setting the options.
 */
function smssync_settings_form($form, &$form_state) {
  $form = array();

  $description = t("The format in which to save the title of the SMS message. Available tokens are");
  $description .= "<ul>";
  $description .= "<li>@from</li>";
  $description .= "<li>@message_id</li>";
  $description .= "<li>@timestamp</li>";
  $description .= "</ul>";
  
  $smssync_secret_key = variable_get('smssync_secret_key', "123456");

  $form['smssync_title_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Title format'),
    '#default_value' => variable_get('smssync_title_format', "SMS Message from @from"),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => $description,
    '#required' => TRUE,
  );

  $form['smssync_secret_key'] = array(
    '#type' => 'password',
    '#title' => t('Secret key'),
    '#default_value' => check_plain($smssync_secret_key),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t("The secret key. Other people call it 'Password'"),
    '#required' => TRUE,
  );

  $refresh_message = "If you would like to watch the messages coming in, "
    . "set this to a number greater than 0 and we will refresh the "
    . "page for you after the specified seconds. A low number is not "
    . "recommended as you may overwhelm your server";

  $form['smssync_autorefresh_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Auto-refresh interval'),
    '#default_value' => variable_get('smssync_autorefresh_interval', "0"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => $refresh_message,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return $form;
}

/**
 * Validate the settings.
 */
function smssync_settings_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  if (is_numeric($values['smssync_autorefresh_interval'])) {
    if ($values['smssync_autorefresh_interval'] < 0) {
      form_set_error('smssync_autorefresh_interval', t("Auto-refresh interval must be greater than or equal to zero"));
    }
  }
  else {
    form_set_error('smssync_autorefresh_interval', t("Auto-refresh interval must be a number"));
  }
}

/**
 * Save the settings when submitted.
 */
function smssync_settings_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $smssync_title_format = $values['smssync_title_format'];
  $smssync_autorefresh_interval = $values['smssync_autorefresh_interval'];
  $smssync_secret_key = $values['smssync_secret_key'];

  $output = "The title format is " . $smssync_title_format;
  $output .= " and the secret key is " . $smssync_secret_key;

  variable_set('smssync_autorefresh_interval', $smssync_autorefresh_interval);
  variable_set('smssync_title_format', $smssync_title_format);
  variable_set('smssync_secret_key', $smssync_secret_key);
  drupal_set_message($output);
}

/**
 * What happens when we start running.
 */
function smssync_listen() {
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_GET['task']) && $_GET['task'] === 'send') {
      smssync_send_task();
    }
    else {
      smssync_save_message();
    }
  }
  else {
    smssync_send_task();
  }
}

/**
 * Saves the messages(SMSs) sent by SMSsync as a POST request.
 */
function smssync_save_message() {
  /*
   * Get the phone number that sent the SMS.
   */
  if (isset($_POST['from'])) {
    $from = $_POST['from'];
  }
  else {
    $error = t('The from variable was not set');
  }

  /*
   * Get the SMS aka the message sent.
   */
  if (isset($_POST['message'])) {
    $message = $_POST['message'];
  }
  else {
    $error = t('The message variable was not set');
  }

  /*
   * Get the secret key set on SMSsync side
   * for matching on the server side.
   */
  if (isset($_POST['secret'])) {
    $secret = $_POST['secret'];
  }

  /*
   * Get the timestamp of the SMS.
   */
  if (isset($_POST['sent_timestamp'])) {
    $sent_timestamp = $_POST['sent_timestamp'];
  }

  /*
   * Get the phone number of the device SMSsync is
   * installed on.
   */
  if (isset($_POST['sent_to'])) {
    // $sent_to = $_POST['sent_to'];
  }

  /*
   * Get the unique message id.
   */
  if (isset($_POST['message_id'])) {
    $message_id = $_POST['message_id'];
  }

  /*
   * Get device ID.
   */
  if (isset($_POST['device_id'])) {
    $device_id = $_POST['device_id'];
  }

  /*
   * Now we have retrieved the data sent over by SMSsync
   * via HTTP. Next thing to do is to do something with
   * the data. Either echo it or write it to a file or even
   * store it in a database.
   *
   * What we do here is to write the SMS message as a node
   *
   */

  if (
      (!empty($from))
      AND (!empty($message))
      AND (!empty($sent_timestamp))
      AND (!empty($message_id))
  ) {
    $smssync_secret_key = check_plain(variable_get('smssync_secret_key', "123456"));

    if (($secret == $smssync_secret_key)) {
      $success = TRUE;

      // Now let's write the info sent by SMSsync.
      $string = $message;

      $body = $string;

      // Create a new node object.
      $node = new stdClass();

      // Or page, or whatever content type you like.
      $node->type = "smssync_sms";

      // Set some default values.
      node_object_prepare($node);

      // Prepare the title.
      $variables = array(
        '@from' => $from,
        '@message_id' => $message_id,
        '@timestamp' => $sent_timestamp,
      );

      $node->title = format_string(variable_get('smssync_title_format', "SMS Message from @from"), $variables);

      // Or e.g. 'en' if locale is enabled.
      $node->language = LANGUAGE_NONE;

      // UID of the author of the node;
      // We need a valid registered user in order to write the nodes.
      $node->uid = $device_id;

      $node->body[$node->language][0]['value'] = $body;
      $node->body[$node->language][0]['summary'] = text_summary($body);
      $node->body[$node->language][0]['format'] = 'filtered_html';

      $node->smssync_timestamp[$node->language][0]['value'] = $sent_timestamp;
      $node->smssync_message_from[$node->language][0]['value'] = $from;
      $node->smssync_message_id[$node->language][0]['value'] = $message_id;
      $node->smssync_device_id[$node->language][0]['value'] = $device_id;

      // You may pathauto, which would override the below path.
      $path = "[$from] - " . date('Y-m-d H:i:s');
      $node->path = array('alias' => $path);

      $account = user_load($device_id);

      if ($account->uid == $device_id) {
        // Valid uid.
        if ($node === node_submit($node)) {
          // Prepare node for saving.
          node_save($node);
        }
      }
      else {
        // Invalid uid.
        $success = FALSE;
        $error = t("Invalid or missing Unique ID");
      }

      $response = json_encode([
          "payload" => [
          "success" => $success,
          "error" => $error
          ]
      ]);
    }
    else {
      $success = FALSE;
      $error = t("Invalid authentication password");

      $response = json_encode([
          "payload" => [
          "success" => $success,
          "error" => $error
          ]
      ]);
    }

    smssync_send_response($response);
  }

  else {
    $success = FALSE;

    $error = t("Critical data missing:");

    if (empty($from)) {
      $error .= t("'FROM' field is empty.");
    }

    if (empty($message)) {
      $error .= t("'MESSAGE' field is empty.");
    }

    if (empty($sent_timestamp)) {
      $error .= t("'SENT_TIMESTAMP' field is empty.");
    }

    if (empty($message_id)) {
      $error .= t("'MESSAGE_ID' field is empty.");
    }

    $response = json_encode([
        "payload" => [
        "success" => $success,
        "error" => $error
        ]
    ]);

    smssync_send_response($response);
  }
}

/**
 * Sets messages to be sent as SMS by SMSsync.
 */
function smssync_send_task() {
  // TODO: Get all outbox messages created specifically by this user.
  // global $user;
  // $result = db_query('SELECT nid FROM node WHERE type = :node_type AND
  // uid = :uid ', array(':node_type' => "outbox", ':uid' => $user->uid));
  $result = db_query('SELECT nid FROM node WHERE type = :node_type AND status = :status', array(':node_type' => "outbox", ':status' => "1"));

  $nodes = array();

  foreach ($result as $record) {
    $nodes[] = $record->nid;
  }

  foreach ($nodes as $node_id) {
    $node = node_load($node_id);

    $message = $node->body;
    $message = $message['LANGUAGE_NONE'][0]['value'];

    $destination = $node->smssync_destination;
    $destination = $destination['LANGUAGE_NONE'][0]['value'];

    $reply[] = [
      "to" => $destination,
      "message" => $message,
      "uuid" => $node_id
    ];

    $node->status = 0;

    node_save($node);
  }

  $s = "TRUE";

  // Send JSON response back to SMSsync.
  $response = json_encode([
    "payload" => [
    "success" => $s,
    "task" => "send",
    "secret" => $smssync_secret_key = check_plain(variable_get('smssync_secret_key', "123456")),
    "messages" => array_values($reply)]
  ]);

  if ($reply != NULL) {
    smssync_send_response($response);
  }
}

/**
 * Send a response back to the user.
 */
function smssync_send_response($response) {
  // Avoid caching.
  // HTTP Version 1.1.
  header("Cache-Control: no-cache, must-revalidate");

  // Date in the past.
  header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
  header("Content-type: application/json; charset=utf-8");

  echo $response;
}

/**
 * How to test.
 */
function smssync_test_smssync() {
  // Use this to test: curl --data "from=09048370465&message=sampletextmessage&\
  // secret=123456&device_id=1&sent_timestamp=1234567&message_id=67890"
  // http://localhost/seven/?q=smssync/listen.
}
